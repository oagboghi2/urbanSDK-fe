{"version":3,"sources":["ReactotronConfig.js","components/tempCard/tempCard.js","Pages/CardRow/CardRow.js","components/tempList/tempList.js","Pages/Shift_Details/ShiftDetails.js","components/tempForm/tempForm.js","components/chartList/tempChart.js","Pages/Dashboard/TroopDashboard.js","App.js","serviceWorker.js","index.js"],"names":["Reactotron","configure","connect","useStyles","makeStyles","card","minWidth","minHeight","backgroundColor","bullet","display","margin","transform","title","fontSize","color","pos","marginBottom","TempCard","props","classes","className","log","dataProps","Card","CardContent","Typography","variant","component","subTitle","CardActions","Button","size","container","alignItems","justifyContent","flexDirection","width","padding","cardContainer","height","borderRadius","opacity","CardRow","avgTemperature","cardData","cwa","location","city","state","TempList","listData","map","item","key","number","moment","startTime","format","endTime","temperature","windSpeed","src","icon","this","weatherData","Component","ShiftDetails","name","startDate","Date","endDate","temperatureUnit","File","windDirection","startDateChange","date","setState","nameChange","event","target","value","tempChange","speedChange","directionChange","data","Chart","defaults","global","defaultFontFamily","legend","elements","line","tension","TempChart","chartRef","React","createRef","buildChart","myChartRef","current","getContext","chartValues","graphHeight","canvas","gradientLine","createLinearGradient","addColorStop","type","labels","toggle","filteredValues","labelValues","datasets","label","fill","borderColor","options","responsive","maintainAspectRatio","layout","top","left","right","bottom","scales","xAxes","ticks","gridLines","drawBorder","yAxes","id","ref","PureComponent","TroopDashboard","day","dayButtonClick","e","nightButtonClick","onClick","App","week","month","forecastPeriods","dayLabelValues","hourly","hourlyCardData","arrAvg","arr","length","sum","reduce","a","b","Math","round","clickWeekly","clickMonthly","fetchTableData","prevState","snapshot","axios","get","headers","response","properties","forecast","forecastHourly","periods","isDaytime","filter","cv","relativeLocation","dayPeriods","makePostRequest","params","speed","post","res","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAEAA,IACGC,YACAC,U,4JCKGC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,UAAW,IACXC,gBAAiB,WAEnBC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,GACVC,MAAO,SAETC,IAAK,CACHC,aAAc,MAIH,SAASC,EAASC,GAC/B,IAAMC,EAAUjB,IACH,0BAAMkB,UAAWD,EAAQX,QAAzB,UAEb,OADAT,IAAWsB,IAAI,YAAaH,EAAMI,WAEhC,kBAACC,EAAA,EAAD,CAAMH,UAAWD,EAAQf,MACvB,kBAACoB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKP,UAAWD,EAAQP,OACzDM,EAAMI,YAGV,kBAACG,EAAA,EAAD,KACIP,EAAMU,UAEV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,YCtCrB,IAAM7B,EAAYC,YAAW,CACzB6B,UAAW,CACPvB,QAAS,OACTwB,WAAY,SACZC,eAAgB,gBAChBC,cAAe,MACfC,MAAO,QACP1B,OAAQ,oBACR2B,QAAS,SAIbC,cAAe,CACbC,OAAQ,OACRL,eAAgB,GAChBxB,OAAQ,qBACRC,UAAW,aACX6B,aAAc,OACdC,QAAS,SAKE,SAASC,EAAQxB,GAC1B,IAAMC,EAAUjB,IAEhB,OADAH,IAAWsB,IAAI,kBAAmBH,GAE9B,yBAAKE,UAAWD,EAAQmB,eACpB,yBAAKlB,UAAWD,EAAQa,WACxB,kBAACf,EAAD,CAAUK,UAAWJ,EAAMyB,eAAgBf,SAAS,aACpD,kBAACX,EAAD,CAAUK,UAAWJ,EAAM0B,SAASC,IAAKjB,SAAS,gBAClD,kBAACX,EAAD,CAAUK,UAAWJ,EAAM4B,SAASC,KAAMnB,SAAS,SACnD,kBAACX,EAAD,CAAUK,UAAWJ,EAAM4B,SAASE,MAAOpB,SAAS,Y,+DCWrDqB,G,kNA1CXC,SAAW,SAAChC,GACR,OAAOA,EAAMiC,KAAI,SAACC,GACd,OACI,yBAAKhC,UAAU,OAAMiC,IAAKD,EAAKE,QAC3B,8BACI,+CAEJ,8BACI,6CAEH,8BACG,gDAEJ,8BACI,+CAEJ,8BACI,yCAIA,8BAAOC,EAAOH,EAAKI,WAAWC,OAAO,QACrC,8BAAOF,EAAOH,EAAKM,SAASD,OAAO,QACnC,8BAAOL,EAAKO,aACZ,8BAAOP,EAAKQ,WACZ,8BAAM,yBAAKC,IAAKT,EAAKU,a,wEAOrC/D,IAAWsB,IAAI,sBAAuB0C,KAAK7C,OADvC,IAEI8C,EAAgBD,KAAK7C,MAArB8C,YACR,OACA,6BACKD,KAAKb,SAASc,Q,GArCJC,cC0FRC,GCzFuBD,Y,2MDOlCjB,MAAQ,CACJmB,KAAM,GACNC,UAAW,IAAIC,KACfC,QAAS,IAAID,KACbV,YAAa,GACbY,gBAAiBC,KACjBZ,UAAW,GACXa,cAAe,I,EAInBC,gBAAkB,SAAAC,GAAI,OAAI,EAAKC,SAAS,CAAED,U,EAE1CE,WAAa,SAAAC,GAAK,OAAI,EAAKF,SAAS,CAChCT,KAAMW,EAAMC,OAAOC,S,EAGvBC,WAAa,SAAAH,GAAK,OAAI,EAAKF,SAAS,CAChCjB,YAAamB,EAAMC,OAAOC,S,EAG9BE,YAAc,SAAAJ,GAAK,OAAI,EAAKF,SAAS,CACjChB,UAAWkB,EAAMC,OAAOC,S,EAG5BG,gBAAkB,SAAAL,GAAK,OAAI,EAAKF,SAAS,CACrCH,cAAeK,EAAMC,OAAOC,S,wEAK5B,OADLjF,IAAWsB,IAAI,cAAe0C,KAAK7C,MAAM8C,aAExB,6BAqCJ,kBAAClC,EAAA,EAAD,CACIJ,QAAQ,YACRZ,MAAM,UACNkE,MAAM,YAEP,kBAAC,UAAD,CAASI,KAAMrB,KAAK7C,MAAM8C,aAA1B,cAEH,kBAAC,EAAD,CAAUA,YAAaD,KAAK7C,MAAM8C,mB,GA7EvBC,c,wBEP3BoB,IAAMC,SAASC,OAAOC,kBAAoB,wBAC1CH,IAAMC,SAASC,OAAOE,OAAOhF,SAAU,EACvC4E,IAAMC,SAASC,OAAOG,SAASC,KAAKC,QAAU,E,IAuF/BC,E,2MAjFXC,SAAWC,IAAMC,Y,EAUjBC,WAAa,WACT,IAAMC,EAAa,EAAKJ,SAASK,QAAQC,WAAW,MACpDrG,IAAWsB,IAAI,SAAU,EAAKH,MAAMmF,aAFrB,IAIAC,EAAeJ,EAAWK,OAAlChE,OACHiE,EAAeN,EACdO,qBAAqB,EAAG,EAAG,EAAGH,GACnCE,EAAaE,aAAa,EAAG,2BAG7B,IAAIrB,IAAMa,EAAY,CAClBS,KAAM,OACNvB,KAAM,CAEFwB,QAA6B,IAAtB,EAAK1F,MAAM2F,OAAkB,EAAK3F,MAAM4F,eAAiB,EAAK5F,MAAM6F,YAC3EC,SAAU,CACN,CACIC,MAAO,UACP7B,KAAM,EAAKlE,MAAMmF,YACjBa,MAAM,EACNC,YAAaX,KAIzBY,QAAS,CAELC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACJlF,QAAS,CACLmF,IAAK,EACLC,KAAM,GACNC,MAAO,GACPC,OAAQ,KAGhBC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CAAErH,SAAS,GAClBsH,UAAW,CACPtH,SAAS,EACTuH,YAAY,KAGpBC,MAAO,CAAC,CACJH,MAAO,CAAErH,SAAS,GAClBsH,UAAW,CACPtH,SAAS,EACTuH,YAAY,U,mFAvDhCjE,KAAKkC,e,2CAILlC,KAAKkC,e,+BA+DL,OADAlG,IAAWsB,IAAI,uBAAwB0C,KAAK7C,OAExC,yBAAKE,UAAU,kBACX,4BACI8G,GAAG,UACHC,IAAKpE,KAAK+B,gB,GA7ENsC,iBCyCTC,G,kNA7CXrF,MAAQ,CAACsF,KAAK,G,EAEdC,eAAiB,SAAAC,GACb,EAAK5D,SAAS,CAAE0D,KAAM,K,EAG1BG,iBAAmB,SAAAD,GACf,EAAK5D,SAAS,CAAE0D,KAAM,K,wEAKtB,OADAvI,IAAWsB,IAAI,uBAAwB0C,KAAK7C,OAExC,yBAAKE,UAAU,aACf,iDACA,yBAAKA,UAAU,mBACX,kBAACU,EAAA,EAAD,CACIJ,QAAQ,YACRZ,MAAM,UACNkE,MAAM,MACN0D,QAAS3E,KAAKwE,gBAJlB,OAQA,kBAACzG,EAAA,EAAD,CACIJ,QAAQ,YACRZ,MAAM,UACNkE,MAAM,QACN0D,QAAS3E,KAAK0E,kBAJlB,UAUJ,kBAAC,EAAD,CACIpC,YAAatC,KAAK7C,MAAMmF,YACxBS,eAAgB/C,KAAK7C,MAAM4F,eAC3BC,YAAahD,KAAK7C,MAAM6F,YACxBF,OAAQ9C,KAAKf,MAAMsF,W,GAvCNF,kBC6HdO,G,kNAnHb3F,MAAQ,CACN4F,MAAM,EACNC,OAAO,EACPC,gBAAiB,GACjBzC,YAAc,GACdU,YAAa,GACbgC,eAAgB,GAChBnG,SAAU,GACVE,SAAU,GACVH,eAAiB,GACjBqG,OAAO,CACLC,eAAgB,K,EAiDpBC,OAAS,SAACC,GACR,IAAIC,EAASD,EAAIC,OACbC,EAAOF,EAAIG,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAIC,KACnC,OAAOC,KAAKC,MAAML,EAAMD,I,EAG1BO,YAAc,SAACnB,GACb,EAAK5D,SAAS,CAAEgE,MAAM,EAAMC,OAAO,K,EAGrCe,aAAe,SAACpB,GACd,EAAK5D,SAAS,CAAEgE,MAAM,EAAOC,OAAO,K,mFAvDpC9E,KAAK8F,mB,yCAGYC,EAAWC,GAC5BhK,IAAWsB,IAAI,QAAS0C,KAAKf,OAC7BjD,IAAWsB,IAAI,YAAayI,K,6JAULE,IAAMC,IAAI,kDAAmD,CAClFC,QAAS,M,cADLC,E,OAGNpK,IAAWsB,IAAI,WAAY8I,G,mBACJH,IAAMC,IAAIE,EAAS/E,KAAKgF,WAAWC,W,cAApDA,E,OACNtK,IAAWsB,IAAI,WAAYgJ,G,oBACEL,IAAMC,IAAIE,EAAS/E,KAAKgF,WAAWE,iB,QAA1DA,E,OACNvK,IAAWsB,IAAI,iBAAkBiJ,GAC7B1H,EAAWuH,EAAS/E,KAAKgF,WACzBrD,EAAcsD,EAASjF,KAAKgF,WAAWG,QAAQpH,KAAI,SAACwB,GAAD,OAAUpB,EAAOoB,EAAKnB,WAAWC,OAAO,SAC3FsF,EAAiBsB,EAASjF,KAAKgF,WAAWG,QAAQpH,KAAI,SAACwB,GAAD,OAAUA,EAAK6F,UAAYjH,EAAOoB,EAAKnB,WAAWC,OAAO,MAAQ,QACvHqD,EAAiBiC,EAAe0B,QAAO,SAACrH,GAAD,OAAmB,OAATA,KACjDiD,EAAcgE,EAASjF,KAAKgF,WAAWG,QAAQpH,KAAI,SAACuH,GAAD,OAAQA,EAAG/G,eAC9Db,EAAWF,EAAS+H,iBAAiBP,WACrCzH,EAAiBoB,KAAKmF,OAAO7C,GAC3BuE,EAAaP,EAASjF,KAAKgF,WAAWG,QAAQE,QAAO,SAAArH,GAAI,OAAuB,IAAnBA,EAAKoH,aAChDF,EACxBvG,KAAM8G,gBAAgB9G,KAAKf,OAC3Be,KAAKa,SAAS,CAAEkE,gBAAkB8B,EAC9BvE,cACAU,cACAD,iBACAlE,WACAD,iBACAG,a,wFAmBgBsC,G,iFACd0F,EAAS,CACbnH,YAAa,GACZoH,MAAO,GAGVhL,IAAWsB,IAAI,cACftB,IAAWsB,IAAI,YAAa+D,G,mBACZ4E,IAAMgB,KAAK,oCAAqCF,I,OAA5DG,E,OAEJlL,IAAWsB,IAAX,gBAAgC4J,G,sEAKhC,OADAlL,IAAWsB,IAAI,oBAAqB0C,KAAKf,OAEvC,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,cAWd,6BACE,yBAAKA,UAAU,aACb,kBAACsB,EAAD,CAASE,SAAUmB,KAAKf,MAAMJ,SAAUE,SAAUiB,KAAKf,MAAMF,SAAWH,eAAgBoB,KAAKf,MAAML,iBACnG,kBAAC,EAAD,CAAgB0D,YAAatC,KAAKf,MAAMqD,YAAaS,eAAgB/C,KAAKf,MAAM8D,eAAgBC,YAAahD,KAAKf,MAAM+D,YAAa6B,KAAM7E,KAAK4F,YAAad,MAAO9E,KAAK6F,eACzK,kBAAC,EAAD,CAAc5F,YAAaD,KAAKf,MAAM8F,yB,GA3GpC7E,cCHEiH,QACW,cAA7BC,OAAOrI,SAASsI,UAEe,UAA7BD,OAAOrI,SAASsI,UAEhBD,OAAOrI,SAASsI,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4da5ddcd.chunk.js","sourcesContent":["import Reactotron from 'reactotron-react-js'\n\nReactotron\n  .configure() // we can use plugins here -- more on this later\n  .connect() // let's connect!\n","import React from 'react';\nimport Reactotron from 'reactotron-react-js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 325,\n    minHeight: 225,\n    backgroundColor: '#273141',\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 48,\n    color: 'white'\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function TempCard(props) {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>â€¢</span>;\n  Reactotron.log('tempCards', props.dataProps)\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\" className={classes.title}>\n         {props.dataProps}\n        </Typography>\n      </CardContent>\n      <Typography >\n         {props.subTitle}\n        </Typography>\n      <CardActions>\n        <Button size=\"small\"></Button>\n      </CardActions>\n    </Card>\n  );\n}","import React, { Component } from 'react';\nimport TempCard from '../../components/tempCard/tempCard.js'\nimport Reactotron from 'reactotron-react-js';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        flexDirection: 'row',\n        width: '100vw',\n        margin: '45px 0px 25px 0px',\n        padding: '12 20',\n        \n        \n      },\n    cardContainer: {\n      height: '35vh',\n      justifyContent: '',\n      margin: '50px 20px 50px 0px',\n      transform: 'scale(0.8)',\n      borderRadius: '20px',\n      opacity: '0.8',\n      \n    },\n  });\n\n  export default function CardRow(props) {\n        const classes = useStyles();\n        Reactotron.log(\"Card Rows props\", props)\n        return (\n            <div className={classes.cardContainer}>\n                <div className={classes.container}>\n                <TempCard dataProps={props.avgTemperature} subTitle='Avg Temp'/>\n                <TempCard dataProps={props.cardData.cwa} subTitle=\"CWA of area\"/>\n                <TempCard dataProps={props.location.city} subTitle=\"City\"/>\n                <TempCard dataProps={props.location.state} subTitle=\"State\"/>\n                </div>\n            </div>\n        )\n    }","import React, { Component } from 'react';\nimport Reactotron from 'reactotron-react-js';\nimport * as moment from 'moment'\n\nimport './tempList.css';\n\nclass TempList extends Component {\n    listData = (props) => {\n        return props.map((item) => {\n            return( \n                <div className=\"grid\"key={item.number}>\n                    <span>\n                        <strong>Start Time</strong>\n                    </span>\n                    <span>\n                        <strong>End Time</strong>\n                    </span>\n                     <span>\n                        <strong>Temperature</strong>\n                    </span>\n                    <span>\n                        <strong>Wind Speed</strong>\n                    </span>\n                    <span>\n                        <strong>Icon</strong>\n                    </span> \n                        {/* <span>{moment(item.startTime).format('LLL')}</span>\n                        <span>{moment(item.endTime).format('LLL')}</span> */}\n                        <span>{moment(item.startTime).format('LLL')}</span>\n                        <span>{moment(item.endTime).format('LLL')}</span>\n                        <span>{item.temperature}</span>\n                        <span>{item.windSpeed}</span>\n                        <span><img src={item.icon}></img></span>\n                </div>\n            )\n        })\n    }\n\n    render(){\n        Reactotron.log('this.props tempList', this.props)\n        const { weatherData } = this.props;\n        return (\n        <div>\n            {this.listData(weatherData)}\n        </div>\n        )\n    }\n}\n\nexport default TempList","import React, { Component } from 'react';\nimport Reactotron from 'reactotron-react-js';\nimport Button from '@material-ui/core/Button';\nimport DatePicker from 'react-date-picker';\nimport axios from 'axios';\nimport { CSVLink } from \"react-csv\";\n\n\nimport './ShiftDetails.css'\nimport TempList from '../../components/tempList/tempList.js';\nimport TempForm from '../../components/tempForm/tempForm.js';\n\n\nclass ShiftDetails extends Component {\n    state = {\n        name: '',\n        startDate: new Date(),\n        endDate: new Date(),\n        temperature: '',\n        temperatureUnit: File,\n        windSpeed: '',\n        windDirection: ''\n      }\n\n\n    startDateChange = date => this.setState({ date })\n\n    nameChange = event => this.setState({ \n        name: event.target.value, \n    });\n\n    tempChange = event => this.setState({ \n        temperature: event.target.value, \n    });\n    \n    speedChange = event => this.setState({ \n        windSpeed: event.target.value, \n    });\n\n    directionChange = event => this.setState({ \n        windDirection: event.target.value, \n    });\n\n    render(){\n   Reactotron.log('weatherData', this.props.weatherData)\n        return (\n                    <div>\n                        {/* <div className=\"formContainer\"> \n                            <form onSubmit={this.handleSubmit}>\n                            <div className=\"firstRow\">\n                                <label>\n                                    Date:\n                                    <input name=\"name\" type=\"text\" value={this.state.name} onChange={this.nameChange} />\n                                </label>\n                            <div>\n                                <DatePicker\n                                dateChange={this.startDateChange}\n                                value={this.state.startDate}\n                            />\n                            </div>\n                            <div>\n                                <DatePicker\n                                dateChange={this.endDateChange}\n                                value={this.state.endDate}\n                            />\n                            </div>\n                        </div>\n                        \n                            <label>\n                                temperature:\n                                <input name=\"temperature\" type=\"number\"  value={this.state.temperature} onChange={this.tempChange} />\n                            </label>\n                            <label>\n                                Wind Speed :\n                                <input name=\"WindSpeed\" type=\"number\" value={this.state.windSpeed} onChange={this.speedChange} />\n                            </label>\n                            <label>\n                                Wind Direction :\n                                <input  name=\"WindDirection\" type=\"text\" value={this.state.windDirection} onChange={this.directionChange} />\n                            </label>\n                            <input type=\"submit\" value=\"Submit\" />\n                        </form>\n                    </div> */}\n                <Button\n                    variant=\"contained\" \n                    color=\"primary\"\n                    value=\"Download\"\n                >\n                   <CSVLink data={this.props.weatherData}>Download </CSVLink>\n                </Button>\n                <TempList weatherData={this.props.weatherData} />\n            </div>\n        )\n    }\n}\n\nexport default ShiftDetails;","import React, { Component } from 'react';\nimport DatePicker from 'react-date-picker';\nimport Reactotron from 'reactotron-react-js';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport { CSVLink } from \"react-csv\";\n\nexport default class TempForm extends Component {\n    state = {\n        startDate: new Date(),\n        endDate: new Date(),\n        temperature: '',\n        speed: ''\n      }\n    startDateChange = date => this.setState({ date })\n\n    handleChange = event => this.setState({ temperature: event.target.value, speed: event.target.value});\n\n\n\n    render() {\n        Reactotron.log('tempForm', this.state)\n    return (\n        <div>\n            <div>\n                <DatePicker\n                dateChange={this.startDateChange}\n                value={this.state.startDate}\n            />\n            </div>\n            <div>\n                <DatePicker\n                dateChange={this.endDateChange}\n                value={this.state.endDate}\n            />\n            </div>\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                temperature:\n                <input type=\"text\" value={this.state.temperature} onChange={this.handleChange} />\n                </label>\n                <label>\n                speed:\n                <input type=\"text\" value={this.state.temperature} onChange={this.handleChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        </div>\n    )\n    }\n}","import React, { PureComponent } from \"react\";\nimport Reactotron from 'reactotron-react-js';\nimport Chart from \"chart.js\";\nimport * as moment from 'moment';\nimport './tempChart.css';\n\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\"\nChart.defaults.global.legend.display = false;\nChart.defaults.global.elements.line.tension = 0;\n\n\nclass TempChart extends PureComponent {\n    \n    \n    chartRef = React.createRef();\n    \n    componentDidMount() {\n        this.buildChart()\n    }\n\n    componentDidUpdate() {\n        this.buildChart()\n    }\n\n    buildChart = () => {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        Reactotron.log(\"values\", this.props.chartValues)\n        \n        const {height: graphHeight} = myChartRef.canvas;\n        let gradientLine = myChartRef\n            .createLinearGradient(0, 0, 0, graphHeight);\n        gradientLine.addColorStop(1, \"rgb(255, 300, 610, 0.3)\");\n  \n        \n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                labels:this.props.toggle !== true ? this.props.filteredValues : this.props.labelValues,\n                datasets: [\n                    {\n                        label: \"Weather\",\n                        data: this.props.chartValues,\n                        fill: true,\n                        borderColor: gradientLine\n                    }\n                ]\n            },\n            options: {\n                // Customize chart options\n                responsive: true,\n                maintainAspectRatio: false,\n                layout: {\n                    padding: {\n                        top: 5,\n                        left: 15,\n                        right: 15,\n                        bottom: 15\n                    }\n                },\n                scales: {\n                    xAxes: [{\n                        ticks: { display: true },\n                        gridLines: {\n                            display: true,\n                            drawBorder: true\n                        }\n                    }],\n                    yAxes: [{\n                        ticks: { display: true },\n                        gridLines: {\n                            display: true,\n                            drawBorder: true\n                        }\n                    }]\n                }\n            }\n        });\n    }\n\n    \n    render() {\n\n        Reactotron.log('this.props Troops.js', this.props)\n        return (\n            <div className=\"graphContainer\">\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n\nexport default TempChart;\n\n\n","import React, { PureComponent } from \"react\";\nimport Reactotron from 'reactotron-react-js';\nimport TempChart from '../../components/chartList/tempChart.js'\nimport Button from '@material-ui/core/Button';\nimport './troopDashboard.css'\n\nclass TroopDashboard extends PureComponent {\n    state = {day: false}\n    \n    dayButtonClick = e => {\n        this.setState({ day : false})\n    }\n\n    nightButtonClick = e => {\n        this.setState({ day : true})\n    }\n\n    render() {\n        Reactotron.log('this.props Troops.js', this.props)\n        return (\n            <div className=\"container\">\n            <h1>Weather Dashboard</h1>\n            <div className=\"buttonContainer\">\n                <Button\n                    variant=\"contained\" \n                    color=\"primary\"\n                    value=\"Day\"\n                    onClick={this.dayButtonClick}\n                >\n                    Day\n                </Button>\n                <Button\n                    variant=\"contained\" \n                    color=\"primary\"\n                    value=\"Night\"\n                    onClick={this.nightButtonClick}\n                >\n                    Night\n                </Button>\n                \n            </div>\n            <TempChart \n                chartValues={this.props.chartValues} \n                filteredValues={this.props.filteredValues} \n                labelValues={this.props.labelValues}\n                toggle={this.state.day}\n                />\n        </div>\n        )\n    }\n}\n\nexport default TroopDashboard;\n\n\n","import React, { Component } from 'react';\nimport Reactotron from 'reactotron-react-js';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport CardRow from './Pages/CardRow/CardRow.js';\nimport ShiftDetails from './Pages/Shift_Details/ShiftDetails.js';\nimport TroopDashboard from './Pages/Dashboard/TroopDashboard.js';\nimport * as moment from 'moment'\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component{\n  state = {\n    week: true,\n    month: false,\n    forecastPeriods: [], \n    chartValues : [],\n    labelValues: [],\n    dayLabelValues: [],\n    cardData: [],\n    location: [],\n    avgTemperature : '',\n    hourly:{\n      hourlyCardData: []\n    }\n  };\n\n  componentDidMount(){\n    this.fetchTableData();\n  }\n\n  componentDidUpdate(prevState, snapshot){\n    Reactotron.log('State', this.state)\n    Reactotron.log('prevState', prevState)\n    // if(prevState !== this.state){\n    //   Reactotron.log(\"no changes\")\n    // } else {\n    //   this.fetchTableData()\n    // }\n  }\n\n\n  async fetchTableData() {\n    const response = await axios.get('https://api.weather.gov/points/30.3322,-81.6557', {\n      headers: {}\n    })\n    Reactotron.log('response', response)\n    const forecast = await axios.get(response.data.properties.forecast)\n    Reactotron.log('forecast', forecast)\n    const forecastHourly = await axios.get(response.data.properties.forecastHourly)\n    Reactotron.log('forecastHourly', forecastHourly)\n    let cardData = response.data.properties\n    let labelValues = forecast.data.properties.periods.map((date) => moment(date.startTime).format('DD'));\n    let dayLabelValues = forecast.data.properties.periods.map((date) => date.isDaytime ? moment(date.startTime).format('DD') : null);\n    let filteredValues = dayLabelValues.filter((item) => item !== null);\n    let chartValues = forecast.data.properties.periods.map((cv) => cv.temperature);\n    let location = cardData.relativeLocation.properties\n    let avgTemperature = this.arrAvg(chartValues);\n    const dayPeriods = forecast.data.properties.periods.filter(item => item.isDaytime === true);\n    let hourlyChartValues = forecastHourly \n    this. makePostRequest(this.state);\n    this.setState({ forecastPeriods : dayPeriods, \n        chartValues, \n        labelValues,\n        filteredValues, \n        cardData, \n        avgTemperature, \n        location,\n        })\n        \n  }\n  \n  arrAvg = (arr) => {\n    let length = arr.length\n    let sum =  arr.reduce((a,b) => a + b)\n    return Math.round(sum / length);\n  }\n\n  clickWeekly = (e) => {\n    this.setState({ week: true, month: false})\n  }\n\n  clickMonthly = (e) => {\n    this.setState({ week: false, month: true})\n  }\n  \n  async makePostRequest(data) {\n    const params = {\n      temperature: 88,\n       speed: 0,\n    }\n\n    Reactotron.log('post fired')\n    Reactotron.log('post data', data)\n    let res = await axios.post('http://localhost:3001/api/weather', params);\n\n    Reactotron.log(`Status code: `, res);\n}\n\n  render(){\n    Reactotron.log('this.state App.js', this.state)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            {/* <div>\n              <ul>\n                <li>\n                  <Link to=\"ShiftDetails\">Shift Details</Link>\n                </li>\n                <li>\n                  <Link to=\"Dashboard\">Dashboard</Link>\n                </li>\n              </ul>\n            </div> */}\n            <hr />\n              <div className=\"container\">\n                <CardRow cardData={this.state.cardData} location={this.state.location}  avgTemperature={this.state.avgTemperature} />\n                <TroopDashboard chartValues={this.state.chartValues} filteredValues={this.state.filteredValues} labelValues={this.state.labelValues} week={this.clickWeekly} month={this.clickMonthly} />\n                <ShiftDetails weatherData={this.state.forecastPeriods} />\n              </div>\n        </header>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './ReactotronConfig'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}